#!/usr/bin/env ruby
# frozen_string_literal: true

$:.unshift(File.expand_path("../lib", __dir__))
require "lox"
require "pp"

source = File.read(ARGV.first)

case ENV["SUITE"]
in "chap04_scanning"
  Lox::Lexer.new(source).each do |token|
    suffix =
      case token
      in { type: :NUMBER, value:, location: }
        number = Lox::Type::Number.new(value: value)
        literal = Lox::AST::Literal.new(value: number, location: location)
        PP.new(+"").then { |q| literal.accept(Lox::Visitor::PrettyPrinter.new(q)); q.flush; q.output }
      in { type: :STRING, value: }
        value
      else
        "null"
      end

    puts "#{token.type} #{source[token.location.range]} #{suffix}"
  end
in "chap06_parsing"
  expr = Lox::Parser.new(source, Lox::Parser::Builder.new).parse_expression(Lox::Lexer.new(source))
  puts PP.new(+"").then { |q| expr.accept(Lox::Visitor::PrettyPrinter.new(q)); q.flush; q.output }
in "chap07_evaluating"
  expr = Lox::Parser.new(source, Lox::Parser::Builder.new).parse_expression(Lox::Lexer.new(source))
  puts expr.accept(Lox::Visitor::Interpreter.new).to_lox
in "chap17_compiling" | "chap18_types" | "chap19_strings" | "chap20_hash"
  compiler = Lox::Bytecode::Compiler.new(source)
  Lox::Parser.new(source, compiler).parse_expression(Lox::Lexer.new(source))

  interpreter = Lox::Bytecode::Interpreter.new(chunk: compiler.chunk)
  interpreter.interpret

  puts interpreter.stack[0].to_lox
in nil
  exit Lox.evaluate(source)
in /^chap(\d+)_/
  exit $1.to_i < 17 ? Lox.interpret(source) : Lox.evaluate(source)
end
